name: Release

on:
  push:
    branches: [main]
  workflow_dispatch: # Allow manual triggering

jobs:
  # Semantic Release - handles version bumping, changelog, and tagging
  semantic-release:
    name: Semantic Release
    runs-on: ubuntu-latest
    outputs:
      released: ${{ steps.release.outputs.released }}
      version: ${{ steps.release.outputs.version }}
      tag: ${{ steps.release.outputs.tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-release-${{ hashFiles('**/pyproject.toml') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run semantic release
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Run semantic release
          semantic-release version --print > version_output.txt 2>&1 || true

          # Check if a new version was created
          if semantic-release version --print --no-commit --no-tag --no-push 2>/dev/null | grep -q "would bump"; then
            echo "New release needed"
            semantic-release version
            echo "released=true" >> $GITHUB_OUTPUT

            # Get the new version and tag
            NEW_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
          else
            echo "No release needed"
            echo "released=false" >> $GITHUB_OUTPUT
          fi

  # Build package artifacts
  build-package:
    name: Build Package
    runs-on: ubuntu-latest
    needs: semantic-release
    if: needs.semantic-release.outputs.released == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.semantic-release.outputs.tag }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-build-${{ hashFiles('**/pyproject.toml') }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: |
          python -m build

      - name: Check package
        run: |
          twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist/
          retention-days: 30

  # Create GitHub release with artifacts
  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [semantic-release, build-package]
    if: needs.semantic-release.outputs.released == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.semantic-release.outputs.tag }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-files
          path: dist/

      - name: Generate changelog for release
        id: changelog
        run: |
          # Get changelog since last tag (excluding the current one)
          PREVIOUS_TAG=$(git tag -l --sort=-version:refname | grep -v "^${{ needs.semantic-release.outputs.tag }}$" | head -1)

          if [ -z "$PREVIOUS_TAG" ]; then
            echo "No previous tags found, using all commits"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges ${{ needs.semantic-release.outputs.tag }})
          else
            echo "Getting changes between $PREVIOUS_TAG and ${{ needs.semantic-release.outputs.tag }}"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges $PREVIOUS_TAG..${{ needs.semantic-release.outputs.tag }})
          fi

          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="- Initial release"
          fi

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.semantic-release.outputs.tag }}
          name: Release ${{ needs.semantic-release.outputs.tag }}
          body: |
            ## Changes in this Release

            ${{ steps.changelog.outputs.changelog }}

            ## Installation

            ```bash
            # From GitHub releases
            wget https://github.com/${{ github.repository }}/releases/download/${{ needs.semantic-release.outputs.tag }}/fast_sttext-${{ needs.semantic-release.outputs.version }}-py3-none-any.whl
            pip install fast_sttext-${{ needs.semantic-release.outputs.version }}-py3-none-any.whl
            ```

            ## Files

            - **Source Distribution**: `fast-sttext-${{ needs.semantic-release.outputs.version }}.tar.gz`
            - **Wheel Distribution**: `fast_sttext-${{ needs.semantic-release.outputs.version }}-py3-none-any.whl`

            ## Usage

            ```bash
            # Clone and install from source
            git clone https://github.com/${{ github.repository }}.git
            cd fast-sttext
            pip install -e .

            # Generate audiobook
            python -m src.main generate input/your-text.txt
            ```
          files: |
            dist/*
          draft: false
          prerelease: false

  # Cleanup artifacts (optional)
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [semantic-release, build-package, github-release]
    if: always() && needs.semantic-release.outputs.released == 'true'

    steps:
      - name: Delete build artifacts
        uses: geekyeggo/delete-artifact@v4
        with:
          name: dist-files
          failOnError: false
