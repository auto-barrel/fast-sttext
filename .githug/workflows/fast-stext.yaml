name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main, develop, ci/setup-docker-and-release]

jobs:
  test:
    name: Test and Quality Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-3.12-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-3.12-
            ${{ runner.os }}-pip-

      - name: Cache NLTK data
        uses: actions/cache@v4
        with:
          path: ~/nltk_data
          key: nltk-data-${{ runner.os }}
          restore-keys: |
            nltk-data-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Download NLTK data
        run: |
          python -c "import nltk; nltk.download('punkt')"

      - name: Run linting
        run: |
          echo "Running code quality checks..."
          black --check src/
          isort --check-only src/
          flake8 src/

      - name: Run type checking
        run: |
          echo "Running type checking..."
          mypy src/ --ignore-missing-imports || true

      - name: Run tests
        run: |
          echo "Running tests..."
          python test_system.py

      - name: Test CLI commands
        run: |
          echo "Testing CLI commands..."
          python -m src.main --help
          python -m src.main voices --help
          python -m src.main files --help

  build:
    name: Build package
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-3.12-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-3.12-
            ${{ runner.os }}-pip-

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            build/
            *.egg-info/
          key: build-${{ runner.os }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            build-${{ runner.os }}-

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Build package
        run: |
          python -m build

      - name: Check package
        run: |
          twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: package-artifacts
          path: dist/
          retention-days: 7

  security:
    name: Security scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-3.12-security-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-3.12-security-
            ${{ runner.os }}-pip-3.12-
            ${{ runner.os }}-pip-

      - name: Install security tools
        run: |
          pip install safety bandit

      - name: Run safety check
        run: |
          pip install -e .
          safety check

      - name: Run bandit security linter
        run: |
          bandit -r src/ -f json -o bandit-report.json || true

      - name: Upload security report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report
          path: bandit-report.json
          retention-days: 7
