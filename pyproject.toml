[project]
name = "fast-sttext"
version = "0.1.0"
description = "Convert text files to high-quality audiobooks using Google Text-to-Speech API"
authors = [{ name = "Diogo Barrel", email = "santos.barrel@gmail.com" }]
readme = "README.md"
requires-python = ">=3.8"
license = { text = "MIT" }
keywords = [
    "text-to-speech",
    "audiobook",
    "tts",
    "google-cloud",
    "audio-processing",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Sound/Audio :: Speech",
    "Topic :: Text Processing :: General",
    "Topic :: Education",
]

dependencies = [
    "google-cloud-texttospeech==2.17.0",
    "pydub==0.25.1",
    "nltk==3.9.0",
    "click==8.1.7",
    "tqdm==4.66.3",
    "colorama==0.4.6",
    "PyPDF2==3.0.1",
    "ebooklib==0.18",
    "python-dotenv==1.0.0",
    "beautifulsoup4==4.12.2",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "black>=22.0",
    "isort>=5.0",
    "flake8>=5.0",
    "mypy>=1.0",
    "python-semantic-release>=10.0.0",
    "pre-commit>=3.0.0",
    "commitizen>=3.0.0",
    "build>=1.0.0",
    "twine>=4.0.0",
    "bandit>=1.8.0",
    "safety>=3.6.0",
]

[project.urls]
Homepage = "https://github.com/diogobarrel/fast-sttext"
Repository = "https://github.com/diogobarrel/fast-sttext"
Documentation = "https://github.com/diogobarrel/fast-sttext/blob/main/README.md"
Issues = "https://github.com/diogobarrel/fast-sttext/issues"

[project.scripts]
fast-sttext = "src.main:cli"

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]

[tool.setuptools.package-data]
"*" = ["*.txt", "*.md", "*.json"]

[tool.flake8]
max-line-length = 120
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv",
    ".eggs",
    "*.egg-info",
]

[tool.black]
line-length = 120
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 120
known_first_party = ["src"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

# Semantic Release Configuration
[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
version_variables = ["src/__init__.py:__version__"]
build_command = "pip install build && python -m build"
dist_path = "dist/"
upload_to_pypi = false
upload_to_release = true
remove_dist = false
changelog_file = "CHANGELOG.md"
commit_message = "chore(release): {version}"

[tool.semantic_release.changelog]
template_dir = "templates"
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = [
    "chore(release):",
    "Merge pull request",
    "Merge branch",
]

[tool.semantic_release.branches.main]
match = "main"
prerelease = false

[tool.semantic_release.commit_parser_options]
allowed_tags = [
    "build",
    "chore",
    "ci",
    "docs",
    "feat",
    "fix",
    "perf",
    "style",
    "refactor",
    "test",
]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]

# Commitizen Configuration
[tool.commitizen]
name = "cz_conventional_commits"
version = "0.1.0"
version_files = ["pyproject.toml:version", "src/__init__.py:__version__"]
update_changelog_on_bump = true
tag_format = "v$version"
